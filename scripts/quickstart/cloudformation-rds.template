{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Skygear Server self-hosted configuration with RDS database",

  "Parameters" : {
    "Instance" : {
      "Description" : "Type of EC2 instance to launch",
      "Type" : "String",
      "Default" : "m3.medium",
      "AllowedValues": [
        "t2.small", "t2.medium", "t2.large", "m3.medium", "m4.large",
        "m4.xlarge", "m4.2xlarge", "c4.large", "c4.xlarge", "c4.2xlarge"
      ]
    },
    "Data" : {
      "Description" : "Size of attached EBS volumes (in GB)",
      "Type" : "Number",
      "Default" : 20,
      "MinValue" : 10,
      "MaxValue" : 1000
    },
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "DBInstance": {
      "Description" : "Type of RDS instance to launch",
      "Type" : "String",
      "Default" : "db.m3.medium",
      "AllowedValues": [
        "db.m3.medium", "db.m3.large", "db.m3.xlarge", "db.m3.2xlarge",
        "db.m4.large", "db.m4.xlarge", "db.m4.2xlarge", "db.m4.4xlarge", "db.m4.10xlarge",
        "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", "db.r3.8xlarge",
        "db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large"
      ]
    },
    "DBData" : {
      "Description" : "Size of RDS storage (in GB)",
      "Type" : "Number",
      "Default" : 20,
      "MinValue" : 10,
      "MaxValue" : 1000
    },
    "DBPassword" : {
      "Description" : "Password of the master user account",
      "Type" : "String"
    }
  },

  "Conditions" : {
    "HasKeyName" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "KeyName" }, ""] }] },
    "IsCreateBucket" : { "Fn::Equals" : [ "true", "true" ] }
  },

  "Mappings" : {
    "RegionImageMap" : {
      "ap-northeast-1" : { "AMI" : "ami-d2fcf0bc" },
      "ap-southeast-1" : { "AMI" : "ami-a6e52dc5" },
      "ap-southeast-2" : { "AMI" : "ami-0956776a" },
      "eu-central-1" : { "AMI" : "ami-79aa4e16" },
      "eu-west-1" : { "AMI" : "ami-34dc6547" },
      "sa-east-1" : { "AMI" : "ami-c6189aaa" },
      "us-east-1" : { "AMI" : "ami-1630087c" },
      "us-west-1" : { "AMI" : "ami-1e3b487e" },
      "us-west-2" : { "AMI" : "ami-b619f5d6" }
    }
  },

  "Resources" : {
    "StandaloneInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "asset_implementation" : { "Fn::If" : [ "IsCreateBucket", "s3", "fs" ] },
        "asset_aws_access_key" : { "Fn::If" : [ "IsCreateBucket", { "Ref" : "AssetAccessKey" }, "" ] },
        "asset_aws_secret_key" : { "Fn::If" : [ "IsCreateBucket", { "Fn::GetAtt" : [ "AssetAccessKey", "SecretAccessKey" ] }, "" ] },
        "asset_aws_bucket" : { "Fn::If" : [ "IsCreateBucket", { "Ref" : "AssetBucket" }, "" ] },
        "asset_aws_region" : { "Fn::If" : [ "IsCreateBucket", { "Ref" : "AWS::Region" }, "" ] },
        "database_host" : { "Fn::Join" : [ "", [ "postgres://", { "Fn::GetAtt" : [ "DatabaseInstance", "Endpoint.Address" ]}]]}
      },
      "Properties" : {
        "SecurityGroups" : [ { "Ref" : "StandaloneInstanceSecurityGroup" } ],
        "KeyName" : { "Fn::If" : [ "HasKeyName",
                                   { "Ref" : "KeyName" },
                                   { "Ref" : "AWS::NoValue" }
                                 ]},
        "ImageId" : { "Fn::FindInMap" : [ "RegionImageMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "Instance" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "", [
              "#cloud-config\n",
              "runcmd:\n",
              "- [ ", { "Fn::Join" : [ ",", [ "cloud-init-per", "once", "kickstart",
                                              "/usr/local/bin/kickstart.sh",
                                              "-s", { "Ref" : "AWS::StackName" },
                                              "-n", "StandaloneInstance",
                                              "-r", { "Ref" : "AWS::Region" }
                                            ]
                                     ]
                      }, " ]\n"
            ] ]
          }
        },
        "BlockDeviceMappings": [
          {
            "DeviceName" : "/dev/xvdf",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize" : { "Ref" : "Data" },
              "Encrypted": false,
              "DeleteOnTermination": false
            }
          }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : "Skygear Server" }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT5M"
        }
      }
    },

    "StandaloneInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access to standalone instance inbound ports",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : 80,
            "ToPort" : 80,
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : 443,
            "ToPort" : 443,
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },

    "DatabaseInstance" : {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" : {
        "AllocatedStorage" : {"Ref" : "DBData"},
        "AllowMajorVersionUpgrade" : false,
        "DBInstanceClass" : {"Ref" : "DBInstance"},
        "DBName" : "postgres",
        "Engine" : "postgres",
        "EngineVersion" : "9.4.5",
        "MasterUsername" : "postgres",
        "MasterUserPassword" : { "Ref" : "DBPassword" },
        "MultiAZ" : false,
        "PubliclyAccessible" : false,
        "VPCSecurityGroups" : [ { "Fn::GetAtt": [ "StandaloneInstanceSecurityGroup", "GroupId" ] } ]
      }
    },

    "DatabaseInstanceSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": { "Ref": "StandaloneInstanceSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "5432",
        "ToPort": "5432",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "StandaloneInstanceSecurityGroup", "GroupId" ] }
      }
    },

    "AssetBucket": {
      "Type" : "AWS::S3::Bucket",
      "Condition" : "IsCreateBucket",
      "DeletionPolicy" : "Retain"
    },

    "SampleBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Condition" : "IsCreateBucket",
      "Properties" : {
        "Bucket" : {"Ref" : "AssetBucket"},
        "PolicyDocument" : {
          "Statement": [ {
            "Action" : [
              "s3:GetObject"
            ],
            "Effect" : "Allow",
            "Resource" : { "Fn::Join" : [ "", ["arn:aws:s3:::", { "Ref" : "AssetBucket" } , "/*" ] ] },
            "Principal" : "*"
          } ]
        }
      }
    },

    "AssetAccessKey" : {
      "Type" : "AWS::IAM::AccessKey",
      "Condition" : "IsCreateBucket",
      "Properties" : {
        "UserName" : { "Ref" : "AssetUser" }
      }
    },

    "AssetUser" : {
      "Type": "AWS::IAM::User",
      "Condition" : "IsCreateBucket",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName" : "AssetBucketPolicy",
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Statement" : [
                {
                  "Effect": "Allow",
                  "Action": ["s3:ListBucket"],
                  "Resource": [{ "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "AssetBucket" } ] ] }]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": [{ "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "AssetBucket" } , "/*" ] ] }]
                }
              ]
            }
          }
        ]
      }
    }
  },

  "Outputs" : {
    "PublicURL" : {
      "Description" : "URL of the primary instance",
      "Value" : { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "StandaloneInstance", "PublicIp" ]}]]}
    },

    "DatabaseEndpoint" : {
      "Description" : "Endpoint of the database instance",
      "Value" : { "Fn::Join" : [ "", [ "postgres://", { "Fn::GetAtt" : [ "DatabaseInstance", "Endpoint.Address" ]}]]}
    },

    "AssetBucketName" : {
      "Description" : "Name of the bucket holding asset files",
      "Value" : { "Ref" : "AssetBucket" },
      "Condition" : "IsCreateBucket"
    }
  }
}
