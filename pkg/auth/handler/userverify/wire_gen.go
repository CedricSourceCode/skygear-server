// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package userverify

import (
	"github.com/skygeario/skygear-server/pkg/auth"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/hook"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/identity/loginid"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/urlprefix"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/userprofile"
	"github.com/skygeario/skygear-server/pkg/auth/dependency/userverify"
	"github.com/skygeario/skygear-server/pkg/core/auth/authinfo/pq"
	"github.com/skygeario/skygear-server/pkg/core/db"
	"github.com/skygeario/skygear-server/pkg/core/handler"
	"github.com/skygeario/skygear-server/pkg/core/logging"
	"github.com/skygeario/skygear-server/pkg/core/mail"
	"github.com/skygeario/skygear-server/pkg/core/sms"
	"github.com/skygeario/skygear-server/pkg/core/time"
	"net/http"
)

// Injectors from wire.go:

func newUpdateHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	requestID := auth.ProvideLoggingRequestID(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	factory := logging.ProvideLoggerFactory(context, requestID, tenantConfiguration)
	requireAuthz := handler.NewRequireAuthzFactory(factory)
	validator := auth.ProvideValidator(m)
	sqlBuilderFactory := db.ProvideSQLBuilderFactory(tenantConfiguration)
	sqlExecutor := db.ProvideSQLExecutor(context, tenantConfiguration)
	store := pq.ProvideStore(sqlBuilderFactory, sqlExecutor)
	provider := time.NewProvider()
	sqlBuilder := auth.ProvideAuthSQLBuilder(sqlBuilderFactory)
	userprofileStore := userprofile.ProvideStore(provider, sqlBuilder, sqlExecutor)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	checker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, provider, tenantConfiguration, checker, normalizerFactory)
	userverifyProvider := userverify.ProvideProvider(tenantConfiguration, provider, sqlBuilder, sqlExecutor)
	txContext := db.ProvideTxContext(context, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, requestID, tenantConfiguration, txContext, provider, store, userprofileStore, loginidProvider, factory)
	updateHandler := &UpdateHandler{
		Validator:                validator,
		AuthInfoStore:            store,
		UserProfileStore:         userprofileStore,
		LoginIDProvider:          loginidProvider,
		UserVerificationProvider: userverifyProvider,
		HookProvider:             hookProvider,
		TxContext:                txContext,
	}
	httpHandler := provideUpdateHandler(requireAuthz, updateHandler)
	return httpHandler
}

func newVerifyCodeHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	requestID := auth.ProvideLoggingRequestID(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	factory := logging.ProvideLoggerFactory(context, requestID, tenantConfiguration)
	requireAuthz := handler.NewRequireAuthzFactory(factory)
	txContext := db.ProvideTxContext(context, tenantConfiguration)
	validator := auth.ProvideValidator(m)
	provider := time.NewProvider()
	sqlBuilderFactory := db.ProvideSQLBuilderFactory(tenantConfiguration)
	sqlBuilder := auth.ProvideAuthSQLBuilder(sqlBuilderFactory)
	sqlExecutor := db.ProvideSQLExecutor(context, tenantConfiguration)
	userverifyProvider := userverify.ProvideProvider(tenantConfiguration, provider, sqlBuilder, sqlExecutor)
	store := pq.ProvideStore(sqlBuilderFactory, sqlExecutor)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	checker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, provider, tenantConfiguration, checker, normalizerFactory)
	userprofileStore := userprofile.ProvideStore(provider, sqlBuilder, sqlExecutor)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, requestID, tenantConfiguration, txContext, provider, store, userprofileStore, loginidProvider, factory)
	verifyCodeHandler := &VerifyCodeHandler{
		TxContext:                txContext,
		Validator:                validator,
		UserVerificationProvider: userverifyProvider,
		AuthInfoStore:            store,
		LoginIDProvider:          loginidProvider,
		UserProfileStore:         userprofileStore,
		HookProvider:             hookProvider,
	}
	httpHandler := provideVerifyCodeHandler(requireAuthz, verifyCodeHandler)
	return httpHandler
}

func newVerifyCodeFormHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	validator := auth.ProvideValidator(m)
	context := auth.ProvideContext(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	verifyHTMLProvider := userverify.ProviderHTMLProvider(tenantConfiguration, engine)
	provider := time.NewProvider()
	sqlBuilderFactory := db.ProvideSQLBuilderFactory(tenantConfiguration)
	sqlBuilder := auth.ProvideAuthSQLBuilder(sqlBuilderFactory)
	sqlExecutor := db.ProvideSQLExecutor(context, tenantConfiguration)
	userverifyProvider := userverify.ProvideProvider(tenantConfiguration, provider, sqlBuilder, sqlExecutor)
	store := pq.ProvideStore(sqlBuilderFactory, sqlExecutor)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	checker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, provider, tenantConfiguration, checker, normalizerFactory)
	userprofileStore := userprofile.ProvideStore(provider, sqlBuilder, sqlExecutor)
	requestID := auth.ProvideLoggingRequestID(r)
	txContext := db.ProvideTxContext(context, tenantConfiguration)
	factory := logging.ProvideLoggerFactory(context, requestID, tenantConfiguration)
	hookProvider := hook.ProvideHookProvider(context, sqlBuilder, sqlExecutor, requestID, tenantConfiguration, txContext, provider, store, userprofileStore, loginidProvider, factory)
	verifyCodeFormHandler := &VerifyCodeFormHandler{
		Validator:                validator,
		VerifyHTMLProvider:       verifyHTMLProvider,
		UserVerificationProvider: userverifyProvider,
		AuthInfoStore:            store,
		LoginIDProvider:          loginidProvider,
		UserProfileStore:         userprofileStore,
		HookProvider:             hookProvider,
		TxContext:                txContext,
	}
	httpHandler := provideVerifyCodeFormHandler(verifyCodeFormHandler)
	return httpHandler
}

func newVerifyRequestHandler(r *http.Request, m auth.DependencyMap) http.Handler {
	context := auth.ProvideContext(r)
	requestID := auth.ProvideLoggingRequestID(r)
	tenantConfiguration := auth.ProvideTenantConfig(context, m)
	factory := logging.ProvideLoggerFactory(context, requestID, tenantConfiguration)
	requireAuthz := handler.NewRequireAuthzFactory(factory)
	txContext := db.ProvideTxContext(context, tenantConfiguration)
	validator := auth.ProvideValidator(m)
	engine := auth.ProvideTemplateEngine(tenantConfiguration, m)
	sender := mail.ProvideMailSender(context, tenantConfiguration)
	client := sms.ProvideSMSClient(context, tenantConfiguration)
	codeSenderFactory := userverify.NewDefaultUserVerifyCodeSenderFactory(tenantConfiguration, engine, sender, client)
	provider := urlprefix.NewProvider(r)
	timeProvider := time.NewProvider()
	sqlBuilderFactory := db.ProvideSQLBuilderFactory(tenantConfiguration)
	sqlBuilder := auth.ProvideAuthSQLBuilder(sqlBuilderFactory)
	sqlExecutor := db.ProvideSQLExecutor(context, tenantConfiguration)
	userverifyProvider := userverify.ProvideProvider(tenantConfiguration, timeProvider, sqlBuilder, sqlExecutor)
	store := pq.ProvideStore(sqlBuilderFactory, sqlExecutor)
	userprofileStore := userprofile.ProvideStore(timeProvider, sqlBuilder, sqlExecutor)
	reservedNameChecker := auth.ProvideReservedNameChecker(m)
	typeCheckerFactory := loginid.ProvideTypeCheckerFactory(tenantConfiguration, reservedNameChecker)
	checker := loginid.ProvideChecker(tenantConfiguration, typeCheckerFactory)
	normalizerFactory := loginid.ProvideNormalizerFactory(tenantConfiguration)
	loginidProvider := loginid.ProvideProvider(sqlBuilder, sqlExecutor, timeProvider, tenantConfiguration, checker, normalizerFactory)
	verifyRequestHandler := &VerifyRequestHandler{
		TxContext:                txContext,
		Validator:                validator,
		CodeSenderFactory:        codeSenderFactory,
		URLPrefixProvider:        provider,
		UserVerificationProvider: userverifyProvider,
		AuthInfoStore:            store,
		UserProfileStore:         userprofileStore,
		LoginIDProvider:          loginidProvider,
	}
	httpHandler := provideVerifyRequestHandler(requireAuthz, verifyRequestHandler)
	return httpHandler
}

// wire.go:

func provideUpdateHandler(requireAuthz handler.RequireAuthz, h *UpdateHandler) http.Handler {
	return requireAuthz(h, h)
}

func provideVerifyCodeHandler(requireAuthz handler.RequireAuthz, h *VerifyCodeHandler) http.Handler {
	return requireAuthz(h, h)
}

func provideVerifyCodeFormHandler(h *VerifyCodeFormHandler) http.Handler {
	return h
}

func provideVerifyRequestHandler(requireAuthz handler.RequireAuthz, h *VerifyRequestHandler) http.Handler {
	return requireAuthz(h, h)
}
