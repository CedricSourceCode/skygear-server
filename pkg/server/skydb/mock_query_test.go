// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

package skydb

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFunc is a mock of Func interface
type MockFunc struct {
	ctrl     *gomock.Controller
	recorder *MockFuncMockRecorder
}

// MockFuncMockRecorder is the mock recorder for MockFunc
type MockFuncMockRecorder struct {
	mock *MockFunc
}

// NewMockFunc creates a new mock instance
func NewMockFunc(ctrl *gomock.Controller) *MockFunc {
	mock := &MockFunc{ctrl: ctrl}
	mock.recorder = &MockFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFunc) EXPECT() *MockFuncMockRecorder {
	return _m.recorder
}

// Args mocks base method
func (_m *MockFunc) Args() []interface{} {
	ret := _m.ctrl.Call(_m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args
func (_mr *MockFuncMockRecorder) Args() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Args", reflect.TypeOf((*MockFunc)(nil).Args))
}

// DataType mocks base method
func (_m *MockFunc) DataType() DataType {
	ret := _m.ctrl.Call(_m, "DataType")
	ret0, _ := ret[0].(DataType)
	return ret0
}

// DataType indicates an expected call of DataType
func (_mr *MockFuncMockRecorder) DataType() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DataType", reflect.TypeOf((*MockFunc)(nil).DataType))
}

// MockKeyPathFunc is a mock of KeyPathFunc interface
type MockKeyPathFunc struct {
	ctrl     *gomock.Controller
	recorder *MockKeyPathFuncMockRecorder
}

// MockKeyPathFuncMockRecorder is the mock recorder for MockKeyPathFunc
type MockKeyPathFuncMockRecorder struct {
	mock *MockKeyPathFunc
}

// NewMockKeyPathFunc creates a new mock instance
func NewMockKeyPathFunc(ctrl *gomock.Controller) *MockKeyPathFunc {
	mock := &MockKeyPathFunc{ctrl: ctrl}
	mock.recorder = &MockKeyPathFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockKeyPathFunc) EXPECT() *MockKeyPathFuncMockRecorder {
	return _m.recorder
}

// ReferencedKeyPaths mocks base method
func (_m *MockKeyPathFunc) ReferencedKeyPaths() []string {
	ret := _m.ctrl.Call(_m, "ReferencedKeyPaths")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ReferencedKeyPaths indicates an expected call of ReferencedKeyPaths
func (_mr *MockKeyPathFuncMockRecorder) ReferencedKeyPaths() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReferencedKeyPaths", reflect.TypeOf((*MockKeyPathFunc)(nil).ReferencedKeyPaths))
}

// MockVisitor is a mock of Visitor interface
type MockVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockVisitorMockRecorder
}

// MockVisitorMockRecorder is the mock recorder for MockVisitor
type MockVisitorMockRecorder struct {
	mock *MockVisitor
}

// NewMockVisitor creates a new mock instance
func NewMockVisitor(ctrl *gomock.Controller) *MockVisitor {
	mock := &MockVisitor{ctrl: ctrl}
	mock.recorder = &MockVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockVisitor) EXPECT() *MockVisitorMockRecorder {
	return _m.recorder
}

// MockFullQueryVisitor is a mock of FullQueryVisitor interface
type MockFullQueryVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockFullQueryVisitorMockRecorder
}

// MockFullQueryVisitorMockRecorder is the mock recorder for MockFullQueryVisitor
type MockFullQueryVisitorMockRecorder struct {
	mock *MockFullQueryVisitor
}

// NewMockFullQueryVisitor creates a new mock instance
func NewMockFullQueryVisitor(ctrl *gomock.Controller) *MockFullQueryVisitor {
	mock := &MockFullQueryVisitor{ctrl: ctrl}
	mock.recorder = &MockFullQueryVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFullQueryVisitor) EXPECT() *MockFullQueryVisitorMockRecorder {
	return _m.recorder
}

// VisitQuery mocks base method
func (_m *MockFullQueryVisitor) VisitQuery(_param0 Query) {
	_m.ctrl.Call(_m, "VisitQuery", _param0)
}

// VisitQuery indicates an expected call of VisitQuery
func (_mr *MockFullQueryVisitorMockRecorder) VisitQuery(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VisitQuery", reflect.TypeOf((*MockFullQueryVisitor)(nil).VisitQuery), arg0)
}

// EndVisitQuery mocks base method
func (_m *MockFullQueryVisitor) EndVisitQuery(_param0 Query) {
	_m.ctrl.Call(_m, "EndVisitQuery", _param0)
}

// EndVisitQuery indicates an expected call of EndVisitQuery
func (_mr *MockFullQueryVisitorMockRecorder) EndVisitQuery(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EndVisitQuery", reflect.TypeOf((*MockFullQueryVisitor)(nil).EndVisitQuery), arg0)
}

// VisitPredicate mocks base method
func (_m *MockFullQueryVisitor) VisitPredicate(_param0 Predicate) {
	_m.ctrl.Call(_m, "VisitPredicate", _param0)
}

// VisitPredicate indicates an expected call of VisitPredicate
func (_mr *MockFullQueryVisitorMockRecorder) VisitPredicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VisitPredicate", reflect.TypeOf((*MockFullQueryVisitor)(nil).VisitPredicate), arg0)
}

// EndVisitPredicate mocks base method
func (_m *MockFullQueryVisitor) EndVisitPredicate(_param0 Predicate) {
	_m.ctrl.Call(_m, "EndVisitPredicate", _param0)
}

// EndVisitPredicate indicates an expected call of EndVisitPredicate
func (_mr *MockFullQueryVisitorMockRecorder) EndVisitPredicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EndVisitPredicate", reflect.TypeOf((*MockFullQueryVisitor)(nil).EndVisitPredicate), arg0)
}

// VisitSort mocks base method
func (_m *MockFullQueryVisitor) VisitSort(_param0 Sort) {
	_m.ctrl.Call(_m, "VisitSort", _param0)
}

// VisitSort indicates an expected call of VisitSort
func (_mr *MockFullQueryVisitorMockRecorder) VisitSort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VisitSort", reflect.TypeOf((*MockFullQueryVisitor)(nil).VisitSort), arg0)
}

// EndVisitSort mocks base method
func (_m *MockFullQueryVisitor) EndVisitSort(_param0 Sort) {
	_m.ctrl.Call(_m, "EndVisitSort", _param0)
}

// EndVisitSort indicates an expected call of EndVisitSort
func (_mr *MockFullQueryVisitorMockRecorder) EndVisitSort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EndVisitSort", reflect.TypeOf((*MockFullQueryVisitor)(nil).EndVisitSort), arg0)
}

// VisitExpression mocks base method
func (_m *MockFullQueryVisitor) VisitExpression(_param0 Expression) {
	_m.ctrl.Call(_m, "VisitExpression", _param0)
}

// VisitExpression indicates an expected call of VisitExpression
func (_mr *MockFullQueryVisitorMockRecorder) VisitExpression(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VisitExpression", reflect.TypeOf((*MockFullQueryVisitor)(nil).VisitExpression), arg0)
}

// EndVisitExpression mocks base method
func (_m *MockFullQueryVisitor) EndVisitExpression(_param0 Expression) {
	_m.ctrl.Call(_m, "EndVisitExpression", _param0)
}

// EndVisitExpression indicates an expected call of EndVisitExpression
func (_mr *MockFullQueryVisitorMockRecorder) EndVisitExpression(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EndVisitExpression", reflect.TypeOf((*MockFullQueryVisitor)(nil).EndVisitExpression), arg0)
}

// MockQueryVisitor is a mock of QueryVisitor interface
type MockQueryVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockQueryVisitorMockRecorder
}

// MockQueryVisitorMockRecorder is the mock recorder for MockQueryVisitor
type MockQueryVisitorMockRecorder struct {
	mock *MockQueryVisitor
}

// NewMockQueryVisitor creates a new mock instance
func NewMockQueryVisitor(ctrl *gomock.Controller) *MockQueryVisitor {
	mock := &MockQueryVisitor{ctrl: ctrl}
	mock.recorder = &MockQueryVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockQueryVisitor) EXPECT() *MockQueryVisitorMockRecorder {
	return _m.recorder
}

// VisitQuery mocks base method
func (_m *MockQueryVisitor) VisitQuery(_param0 Query) {
	_m.ctrl.Call(_m, "VisitQuery", _param0)
}

// VisitQuery indicates an expected call of VisitQuery
func (_mr *MockQueryVisitorMockRecorder) VisitQuery(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VisitQuery", reflect.TypeOf((*MockQueryVisitor)(nil).VisitQuery), arg0)
}

// EndVisitQuery mocks base method
func (_m *MockQueryVisitor) EndVisitQuery(_param0 Query) {
	_m.ctrl.Call(_m, "EndVisitQuery", _param0)
}

// EndVisitQuery indicates an expected call of EndVisitQuery
func (_mr *MockQueryVisitorMockRecorder) EndVisitQuery(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EndVisitQuery", reflect.TypeOf((*MockQueryVisitor)(nil).EndVisitQuery), arg0)
}

// MockPredicateVisitor is a mock of PredicateVisitor interface
type MockPredicateVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockPredicateVisitorMockRecorder
}

// MockPredicateVisitorMockRecorder is the mock recorder for MockPredicateVisitor
type MockPredicateVisitorMockRecorder struct {
	mock *MockPredicateVisitor
}

// NewMockPredicateVisitor creates a new mock instance
func NewMockPredicateVisitor(ctrl *gomock.Controller) *MockPredicateVisitor {
	mock := &MockPredicateVisitor{ctrl: ctrl}
	mock.recorder = &MockPredicateVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPredicateVisitor) EXPECT() *MockPredicateVisitorMockRecorder {
	return _m.recorder
}

// VisitPredicate mocks base method
func (_m *MockPredicateVisitor) VisitPredicate(_param0 Predicate) {
	_m.ctrl.Call(_m, "VisitPredicate", _param0)
}

// VisitPredicate indicates an expected call of VisitPredicate
func (_mr *MockPredicateVisitorMockRecorder) VisitPredicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VisitPredicate", reflect.TypeOf((*MockPredicateVisitor)(nil).VisitPredicate), arg0)
}

// EndVisitPredicate mocks base method
func (_m *MockPredicateVisitor) EndVisitPredicate(_param0 Predicate) {
	_m.ctrl.Call(_m, "EndVisitPredicate", _param0)
}

// EndVisitPredicate indicates an expected call of EndVisitPredicate
func (_mr *MockPredicateVisitorMockRecorder) EndVisitPredicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EndVisitPredicate", reflect.TypeOf((*MockPredicateVisitor)(nil).EndVisitPredicate), arg0)
}

// MockSortVisitor is a mock of SortVisitor interface
type MockSortVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockSortVisitorMockRecorder
}

// MockSortVisitorMockRecorder is the mock recorder for MockSortVisitor
type MockSortVisitorMockRecorder struct {
	mock *MockSortVisitor
}

// NewMockSortVisitor creates a new mock instance
func NewMockSortVisitor(ctrl *gomock.Controller) *MockSortVisitor {
	mock := &MockSortVisitor{ctrl: ctrl}
	mock.recorder = &MockSortVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSortVisitor) EXPECT() *MockSortVisitorMockRecorder {
	return _m.recorder
}

// VisitSort mocks base method
func (_m *MockSortVisitor) VisitSort(_param0 Sort) {
	_m.ctrl.Call(_m, "VisitSort", _param0)
}

// VisitSort indicates an expected call of VisitSort
func (_mr *MockSortVisitorMockRecorder) VisitSort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VisitSort", reflect.TypeOf((*MockSortVisitor)(nil).VisitSort), arg0)
}

// EndVisitSort mocks base method
func (_m *MockSortVisitor) EndVisitSort(_param0 Sort) {
	_m.ctrl.Call(_m, "EndVisitSort", _param0)
}

// EndVisitSort indicates an expected call of EndVisitSort
func (_mr *MockSortVisitorMockRecorder) EndVisitSort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EndVisitSort", reflect.TypeOf((*MockSortVisitor)(nil).EndVisitSort), arg0)
}

// MockExpressionVisitor is a mock of ExpressionVisitor interface
type MockExpressionVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockExpressionVisitorMockRecorder
}

// MockExpressionVisitorMockRecorder is the mock recorder for MockExpressionVisitor
type MockExpressionVisitorMockRecorder struct {
	mock *MockExpressionVisitor
}

// NewMockExpressionVisitor creates a new mock instance
func NewMockExpressionVisitor(ctrl *gomock.Controller) *MockExpressionVisitor {
	mock := &MockExpressionVisitor{ctrl: ctrl}
	mock.recorder = &MockExpressionVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockExpressionVisitor) EXPECT() *MockExpressionVisitorMockRecorder {
	return _m.recorder
}

// VisitExpression mocks base method
func (_m *MockExpressionVisitor) VisitExpression(_param0 Expression) {
	_m.ctrl.Call(_m, "VisitExpression", _param0)
}

// VisitExpression indicates an expected call of VisitExpression
func (_mr *MockExpressionVisitorMockRecorder) VisitExpression(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "VisitExpression", reflect.TypeOf((*MockExpressionVisitor)(nil).VisitExpression), arg0)
}

// EndVisitExpression mocks base method
func (_m *MockExpressionVisitor) EndVisitExpression(_param0 Expression) {
	_m.ctrl.Call(_m, "EndVisitExpression", _param0)
}

// EndVisitExpression indicates an expected call of EndVisitExpression
func (_mr *MockExpressionVisitorMockRecorder) EndVisitExpression(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EndVisitExpression", reflect.TypeOf((*MockExpressionVisitor)(nil).EndVisitExpression), arg0)
}
