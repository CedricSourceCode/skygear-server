// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/skygeario/skygear-server/pkg/server/skydb (interfaces: Conn,Database)

// Package mock_skydb is a generated GoMock package.
package mock_skydb

import (
	gomock "github.com/golang/mock/gomock"
	skydb "github.com/skygeario/skygear-server/pkg/server/skydb"
	reflect "reflect"
	time "time"
)

// MockConn is a mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// AddRelation mocks base method
func (m *MockConn) AddRelation(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRelation indicates an expected call of AddRelation
func (mr *MockConnMockRecorder) AddRelation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*MockConn)(nil).AddRelation), arg0, arg1, arg2)
}

// Close mocks base method
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// CreateUser mocks base method
func (m *MockConn) CreateUser(arg0 *skydb.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockConnMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockConn)(nil).CreateUser), arg0)
}

// DeleteDevice mocks base method
func (m *MockConn) DeleteDevice(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice
func (mr *MockConnMockRecorder) DeleteDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockConn)(nil).DeleteDevice), arg0)
}

// DeleteDevicesByToken mocks base method
func (m *MockConn) DeleteDevicesByToken(arg0 string, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevicesByToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevicesByToken indicates an expected call of DeleteDevicesByToken
func (mr *MockConnMockRecorder) DeleteDevicesByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevicesByToken", reflect.TypeOf((*MockConn)(nil).DeleteDevicesByToken), arg0, arg1)
}

// DeleteEmptyDevicesByTime mocks base method
func (m *MockConn) DeleteEmptyDevicesByTime(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmptyDevicesByTime", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmptyDevicesByTime indicates an expected call of DeleteEmptyDevicesByTime
func (mr *MockConnMockRecorder) DeleteEmptyDevicesByTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmptyDevicesByTime", reflect.TypeOf((*MockConn)(nil).DeleteEmptyDevicesByTime), arg0)
}

// DeleteUser mocks base method
func (m *MockConn) DeleteUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockConnMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockConn)(nil).DeleteUser), arg0)
}

// GetAdminRoles mocks base method
func (m *MockConn) GetAdminRoles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminRoles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminRoles indicates an expected call of GetAdminRoles
func (mr *MockConnMockRecorder) GetAdminRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminRoles", reflect.TypeOf((*MockConn)(nil).GetAdminRoles))
}

// GetAsset mocks base method
func (m *MockConn) GetAsset(arg0 string, arg1 *skydb.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsset", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAsset indicates an expected call of GetAsset
func (mr *MockConnMockRecorder) GetAsset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockConn)(nil).GetAsset), arg0, arg1)
}

// GetAssets mocks base method
func (m *MockConn) GetAssets(arg0 []string) ([]skydb.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssets", arg0)
	ret0, _ := ret[0].([]skydb.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssets indicates an expected call of GetAssets
func (mr *MockConnMockRecorder) GetAssets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockConn)(nil).GetAssets), arg0)
}

// GetDefaultRoles mocks base method
func (m *MockConn) GetDefaultRoles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultRoles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultRoles indicates an expected call of GetDefaultRoles
func (mr *MockConnMockRecorder) GetDefaultRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultRoles", reflect.TypeOf((*MockConn)(nil).GetDefaultRoles))
}

// GetDevice mocks base method
func (m *MockConn) GetDevice(arg0 string, arg1 *skydb.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDevice indicates an expected call of GetDevice
func (mr *MockConnMockRecorder) GetDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockConn)(nil).GetDevice), arg0, arg1)
}

// GetRecordAccess mocks base method
func (m *MockConn) GetRecordAccess(arg0 string) (skydb.RecordACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordAccess", arg0)
	ret0, _ := ret[0].(skydb.RecordACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordAccess indicates an expected call of GetRecordAccess
func (mr *MockConnMockRecorder) GetRecordAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordAccess", reflect.TypeOf((*MockConn)(nil).GetRecordAccess), arg0)
}

// GetRecordDefaultAccess mocks base method
func (m *MockConn) GetRecordDefaultAccess(arg0 string) (skydb.RecordACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordDefaultAccess", arg0)
	ret0, _ := ret[0].(skydb.RecordACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordDefaultAccess indicates an expected call of GetRecordDefaultAccess
func (mr *MockConnMockRecorder) GetRecordDefaultAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordDefaultAccess", reflect.TypeOf((*MockConn)(nil).GetRecordDefaultAccess), arg0)
}

// GetUser mocks base method
func (m *MockConn) GetUser(arg0 string, arg1 *skydb.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser
func (mr *MockConnMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockConn)(nil).GetUser), arg0, arg1)
}

// GetUserByPrincipalID mocks base method
func (m *MockConn) GetUserByPrincipalID(arg0 string, arg1 *skydb.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPrincipalID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserByPrincipalID indicates an expected call of GetUserByPrincipalID
func (mr *MockConnMockRecorder) GetUserByPrincipalID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPrincipalID", reflect.TypeOf((*MockConn)(nil).GetUserByPrincipalID), arg0, arg1)
}

// GetUserByUsernameEmail mocks base method
func (m *MockConn) GetUserByUsernameEmail(arg0, arg1 string, arg2 *skydb.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserByUsernameEmail indicates an expected call of GetUserByUsernameEmail
func (mr *MockConnMockRecorder) GetUserByUsernameEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameEmail", reflect.TypeOf((*MockConn)(nil).GetUserByUsernameEmail), arg0, arg1, arg2)
}

// PrivateDB mocks base method
func (m *MockConn) PrivateDB(arg0 string) skydb.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateDB", arg0)
	ret0, _ := ret[0].(skydb.Database)
	return ret0
}

// PrivateDB indicates an expected call of PrivateDB
func (mr *MockConnMockRecorder) PrivateDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateDB", reflect.TypeOf((*MockConn)(nil).PrivateDB), arg0)
}

// PublicDB mocks base method
func (m *MockConn) PublicDB() skydb.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicDB")
	ret0, _ := ret[0].(skydb.Database)
	return ret0
}

// PublicDB indicates an expected call of PublicDB
func (mr *MockConnMockRecorder) PublicDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicDB", reflect.TypeOf((*MockConn)(nil).PublicDB))
}

// QueryDevicesByUser mocks base method
func (m *MockConn) QueryDevicesByUser(arg0 string) ([]skydb.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDevicesByUser", arg0)
	ret0, _ := ret[0].([]skydb.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDevicesByUser indicates an expected call of QueryDevicesByUser
func (mr *MockConnMockRecorder) QueryDevicesByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDevicesByUser", reflect.TypeOf((*MockConn)(nil).QueryDevicesByUser), arg0)
}

// QueryDevicesByUserAndTopic mocks base method
func (m *MockConn) QueryDevicesByUserAndTopic(arg0, arg1 string) ([]skydb.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDevicesByUserAndTopic", arg0, arg1)
	ret0, _ := ret[0].([]skydb.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDevicesByUserAndTopic indicates an expected call of QueryDevicesByUserAndTopic
func (mr *MockConnMockRecorder) QueryDevicesByUserAndTopic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDevicesByUserAndTopic", reflect.TypeOf((*MockConn)(nil).QueryDevicesByUserAndTopic), arg0, arg1)
}

// QueryRelation mocks base method
func (m *MockConn) QueryRelation(arg0, arg1, arg2 string, arg3 skydb.QueryConfig) []skydb.UserInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRelation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]skydb.UserInfo)
	return ret0
}

// QueryRelation indicates an expected call of QueryRelation
func (mr *MockConnMockRecorder) QueryRelation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelation", reflect.TypeOf((*MockConn)(nil).QueryRelation), arg0, arg1, arg2, arg3)
}

// QueryRelationCount mocks base method
func (m *MockConn) QueryRelationCount(arg0, arg1, arg2 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRelationCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRelationCount indicates an expected call of QueryRelationCount
func (mr *MockConnMockRecorder) QueryRelationCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationCount", reflect.TypeOf((*MockConn)(nil).QueryRelationCount), arg0, arg1, arg2)
}

// QueryUser mocks base method
func (m *MockConn) QueryUser(arg0, arg1 []string) ([]skydb.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUser", arg0, arg1)
	ret0, _ := ret[0].([]skydb.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUser indicates an expected call of QueryUser
func (mr *MockConnMockRecorder) QueryUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUser", reflect.TypeOf((*MockConn)(nil).QueryUser), arg0, arg1)
}

// RemoveRelation mocks base method
func (m *MockConn) RemoveRelation(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRelation indicates an expected call of RemoveRelation
func (mr *MockConnMockRecorder) RemoveRelation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRelation", reflect.TypeOf((*MockConn)(nil).RemoveRelation), arg0, arg1, arg2)
}

// SaveAsset mocks base method
func (m *MockConn) SaveAsset(arg0 *skydb.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAsset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAsset indicates an expected call of SaveAsset
func (mr *MockConnMockRecorder) SaveAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAsset", reflect.TypeOf((*MockConn)(nil).SaveAsset), arg0)
}

// SaveDevice mocks base method
func (m *MockConn) SaveDevice(arg0 *skydb.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDevice indicates an expected call of SaveDevice
func (mr *MockConnMockRecorder) SaveDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDevice", reflect.TypeOf((*MockConn)(nil).SaveDevice), arg0)
}

// SetAdminRoles mocks base method
func (m *MockConn) SetAdminRoles(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAdminRoles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAdminRoles indicates an expected call of SetAdminRoles
func (mr *MockConnMockRecorder) SetAdminRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAdminRoles", reflect.TypeOf((*MockConn)(nil).SetAdminRoles), arg0)
}

// SetDefaultRoles mocks base method
func (m *MockConn) SetDefaultRoles(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultRoles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultRoles indicates an expected call of SetDefaultRoles
func (mr *MockConnMockRecorder) SetDefaultRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultRoles", reflect.TypeOf((*MockConn)(nil).SetDefaultRoles), arg0)
}

// SetRecordAccess mocks base method
func (m *MockConn) SetRecordAccess(arg0 string, arg1 skydb.RecordACL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRecordAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRecordAccess indicates an expected call of SetRecordAccess
func (mr *MockConnMockRecorder) SetRecordAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRecordAccess", reflect.TypeOf((*MockConn)(nil).SetRecordAccess), arg0, arg1)
}

// SetRecordDefaultAccess mocks base method
func (m *MockConn) SetRecordDefaultAccess(arg0 string, arg1 skydb.RecordACL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRecordDefaultAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRecordDefaultAccess indicates an expected call of SetRecordDefaultAccess
func (mr *MockConnMockRecorder) SetRecordDefaultAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRecordDefaultAccess", reflect.TypeOf((*MockConn)(nil).SetRecordDefaultAccess), arg0, arg1)
}

// Subscribe mocks base method
func (m *MockConn) Subscribe(arg0 chan skydb.RecordEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockConnMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockConn)(nil).Subscribe), arg0)
}

// UnionDB mocks base method
func (m *MockConn) UnionDB() skydb.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnionDB")
	ret0, _ := ret[0].(skydb.Database)
	return ret0
}

// UnionDB indicates an expected call of UnionDB
func (mr *MockConnMockRecorder) UnionDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnionDB", reflect.TypeOf((*MockConn)(nil).UnionDB))
}

// UpdateUser mocks base method
func (m *MockConn) UpdateUser(arg0 *skydb.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockConnMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockConn)(nil).UpdateUser), arg0)
}

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Conn mocks base method
func (m *MockDatabase) Conn() skydb.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(skydb.Conn)
	return ret0
}

// Conn indicates an expected call of Conn
func (mr *MockDatabaseMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockDatabase)(nil).Conn))
}

// DatabaseType mocks base method
func (m *MockDatabase) DatabaseType() skydb.DatabaseType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseType")
	ret0, _ := ret[0].(skydb.DatabaseType)
	return ret0
}

// DatabaseType indicates an expected call of DatabaseType
func (mr *MockDatabaseMockRecorder) DatabaseType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseType", reflect.TypeOf((*MockDatabase)(nil).DatabaseType))
}

// Delete mocks base method
func (m *MockDatabase) Delete(arg0 skydb.RecordID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDatabaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabase)(nil).Delete), arg0)
}

// DeleteSchema mocks base method
func (m *MockDatabase) DeleteSchema(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchema", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchema indicates an expected call of DeleteSchema
func (mr *MockDatabaseMockRecorder) DeleteSchema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchema", reflect.TypeOf((*MockDatabase)(nil).DeleteSchema), arg0, arg1)
}

// DeleteSubscription mocks base method
func (m *MockDatabase) DeleteSubscription(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription
func (mr *MockDatabaseMockRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockDatabase)(nil).DeleteSubscription), arg0, arg1)
}

// Extend mocks base method
func (m *MockDatabase) Extend(arg0 string, arg1 skydb.RecordSchema) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extend", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extend indicates an expected call of Extend
func (mr *MockDatabaseMockRecorder) Extend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extend", reflect.TypeOf((*MockDatabase)(nil).Extend), arg0, arg1)
}

// Get mocks base method
func (m *MockDatabase) Get(arg0 skydb.RecordID, arg1 *skydb.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockDatabaseMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabase)(nil).Get), arg0, arg1)
}

// GetByIDs mocks base method
func (m *MockDatabase) GetByIDs(arg0 []skydb.RecordID) (*skydb.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", arg0)
	ret0, _ := ret[0].(*skydb.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs
func (mr *MockDatabaseMockRecorder) GetByIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockDatabase)(nil).GetByIDs), arg0)
}

// GetMatchingSubscriptions mocks base method
func (m *MockDatabase) GetMatchingSubscriptions(arg0 *skydb.Record) []skydb.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingSubscriptions", arg0)
	ret0, _ := ret[0].([]skydb.Subscription)
	return ret0
}

// GetMatchingSubscriptions indicates an expected call of GetMatchingSubscriptions
func (mr *MockDatabaseMockRecorder) GetMatchingSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingSubscriptions", reflect.TypeOf((*MockDatabase)(nil).GetMatchingSubscriptions), arg0)
}

// GetRecordSchemas mocks base method
func (m *MockDatabase) GetRecordSchemas() (map[string]skydb.RecordSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordSchemas")
	ret0, _ := ret[0].(map[string]skydb.RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordSchemas indicates an expected call of GetRecordSchemas
func (mr *MockDatabaseMockRecorder) GetRecordSchemas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordSchemas", reflect.TypeOf((*MockDatabase)(nil).GetRecordSchemas))
}

// GetSchema mocks base method
func (m *MockDatabase) GetSchema(arg0 string) (skydb.RecordSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema", arg0)
	ret0, _ := ret[0].(skydb.RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema
func (mr *MockDatabaseMockRecorder) GetSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockDatabase)(nil).GetSchema), arg0)
}

// GetSubscription mocks base method
func (m *MockDatabase) GetSubscription(arg0, arg1 string, arg2 *skydb.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSubscription indicates an expected call of GetSubscription
func (mr *MockDatabaseMockRecorder) GetSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockDatabase)(nil).GetSubscription), arg0, arg1, arg2)
}

// GetSubscriptionsByDeviceID mocks base method
func (m *MockDatabase) GetSubscriptionsByDeviceID(arg0 string) []skydb.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByDeviceID", arg0)
	ret0, _ := ret[0].([]skydb.Subscription)
	return ret0
}

// GetSubscriptionsByDeviceID indicates an expected call of GetSubscriptionsByDeviceID
func (mr *MockDatabaseMockRecorder) GetSubscriptionsByDeviceID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByDeviceID", reflect.TypeOf((*MockDatabase)(nil).GetSubscriptionsByDeviceID), arg0)
}

// ID mocks base method
func (m *MockDatabase) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockDatabaseMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDatabase)(nil).ID))
}

// IsReadOnly mocks base method
func (m *MockDatabase) IsReadOnly() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReadOnly")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReadOnly indicates an expected call of IsReadOnly
func (mr *MockDatabaseMockRecorder) IsReadOnly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReadOnly", reflect.TypeOf((*MockDatabase)(nil).IsReadOnly))
}

// Query mocks base method
func (m *MockDatabase) Query(arg0 *skydb.Query) (*skydb.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].(*skydb.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockDatabaseMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDatabase)(nil).Query), arg0)
}

// QueryCount mocks base method
func (m *MockDatabase) QueryCount(arg0 *skydb.Query) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCount", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCount indicates an expected call of QueryCount
func (mr *MockDatabaseMockRecorder) QueryCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCount", reflect.TypeOf((*MockDatabase)(nil).QueryCount), arg0)
}

// RemoteColumnTypes mocks base method
func (m *MockDatabase) RemoteColumnTypes(arg0 string) (skydb.RecordSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteColumnTypes", arg0)
	ret0, _ := ret[0].(skydb.RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteColumnTypes indicates an expected call of RemoteColumnTypes
func (mr *MockDatabaseMockRecorder) RemoteColumnTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteColumnTypes", reflect.TypeOf((*MockDatabase)(nil).RemoteColumnTypes), arg0)
}

// RenameSchema mocks base method
func (m *MockDatabase) RenameSchema(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameSchema", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameSchema indicates an expected call of RenameSchema
func (mr *MockDatabaseMockRecorder) RenameSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameSchema", reflect.TypeOf((*MockDatabase)(nil).RenameSchema), arg0, arg1, arg2)
}

// Save mocks base method
func (m *MockDatabase) Save(arg0 *skydb.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockDatabaseMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDatabase)(nil).Save), arg0)
}

// SaveSubscription mocks base method
func (m *MockDatabase) SaveSubscription(arg0 *skydb.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSubscription indicates an expected call of SaveSubscription
func (mr *MockDatabaseMockRecorder) SaveSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSubscription", reflect.TypeOf((*MockDatabase)(nil).SaveSubscription), arg0)
}

// TableName mocks base method
func (m *MockDatabase) TableName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// TableName indicates an expected call of TableName
func (mr *MockDatabaseMockRecorder) TableName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableName", reflect.TypeOf((*MockDatabase)(nil).TableName), arg0)
}

// UserRecordType mocks base method
func (m *MockDatabase) UserRecordType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRecordType")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserRecordType indicates an expected call of UserRecordType
func (mr *MockDatabaseMockRecorder) UserRecordType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRecordType", reflect.TypeOf((*MockDatabase)(nil).UserRecordType))
}
