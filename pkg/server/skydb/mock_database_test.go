// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

package skydb

import (
	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return _m.recorder
}

// Conn mocks base method
func (_m *MockDatabase) Conn() Conn {
	ret := _m.ctrl.Call(_m, "Conn")
	ret0, _ := ret[0].(Conn)
	return ret0
}

// Conn indicates an expected call of Conn
func (_mr *MockDatabaseMockRecorder) Conn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Conn")
}

// ID mocks base method
func (_m *MockDatabase) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (_mr *MockDatabaseMockRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

// DatabaseType mocks base method
func (_m *MockDatabase) DatabaseType() DatabaseType {
	ret := _m.ctrl.Call(_m, "DatabaseType")
	ret0, _ := ret[0].(DatabaseType)
	return ret0
}

// DatabaseType indicates an expected call of DatabaseType
func (_mr *MockDatabaseMockRecorder) DatabaseType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DatabaseType")
}

// UserRecordType mocks base method
func (_m *MockDatabase) UserRecordType() string {
	ret := _m.ctrl.Call(_m, "UserRecordType")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserRecordType indicates an expected call of UserRecordType
func (_mr *MockDatabaseMockRecorder) UserRecordType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UserRecordType")
}

// TableName mocks base method
func (_m *MockDatabase) TableName(table string) string {
	ret := _m.ctrl.Call(_m, "TableName", table)
	ret0, _ := ret[0].(string)
	return ret0
}

// TableName indicates an expected call of TableName
func (_mr *MockDatabaseMockRecorder) TableName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TableName", arg0)
}

// IsReadOnly mocks base method
func (_m *MockDatabase) IsReadOnly() bool {
	ret := _m.ctrl.Call(_m, "IsReadOnly")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReadOnly indicates an expected call of IsReadOnly
func (_mr *MockDatabaseMockRecorder) IsReadOnly() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsReadOnly")
}

// RemoteColumnTypes mocks base method
func (_m *MockDatabase) RemoteColumnTypes(recordType string) (RecordSchema, error) {
	ret := _m.ctrl.Call(_m, "RemoteColumnTypes", recordType)
	ret0, _ := ret[0].(RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteColumnTypes indicates an expected call of RemoteColumnTypes
func (_mr *MockDatabaseMockRecorder) RemoteColumnTypes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoteColumnTypes", arg0)
}

// Get mocks base method
func (_m *MockDatabase) Get(id RecordID, record *Record) error {
	ret := _m.ctrl.Call(_m, "Get", id, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockDatabaseMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

// GetByIDs mocks base method
func (_m *MockDatabase) GetByIDs(ids []RecordID) (*Rows, error) {
	ret := _m.ctrl.Call(_m, "GetByIDs", ids)
	ret0, _ := ret[0].(*Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs
func (_mr *MockDatabaseMockRecorder) GetByIDs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetByIDs", arg0)
}

// Save mocks base method
func (_m *MockDatabase) Save(record *Record) error {
	ret := _m.ctrl.Call(_m, "Save", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (_mr *MockDatabaseMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Save", arg0)
}

// Delete mocks base method
func (_m *MockDatabase) Delete(id RecordID) error {
	ret := _m.ctrl.Call(_m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockDatabaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

// Query mocks base method
func (_m *MockDatabase) Query(query *Query) (*Rows, error) {
	ret := _m.ctrl.Call(_m, "Query", query)
	ret0, _ := ret[0].(*Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (_mr *MockDatabaseMockRecorder) Query(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Query", arg0)
}

// QueryCount mocks base method
func (_m *MockDatabase) QueryCount(query *Query) (uint64, error) {
	ret := _m.ctrl.Call(_m, "QueryCount", query)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCount indicates an expected call of QueryCount
func (_mr *MockDatabaseMockRecorder) QueryCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryCount", arg0)
}

// Extend mocks base method
func (_m *MockDatabase) Extend(recordType string, schema RecordSchema) (bool, error) {
	ret := _m.ctrl.Call(_m, "Extend", recordType, schema)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extend indicates an expected call of Extend
func (_mr *MockDatabaseMockRecorder) Extend(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Extend", arg0, arg1)
}

// RenameSchema mocks base method
func (_m *MockDatabase) RenameSchema(recordType string, oldColumnName string, newColumnName string) error {
	ret := _m.ctrl.Call(_m, "RenameSchema", recordType, oldColumnName, newColumnName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameSchema indicates an expected call of RenameSchema
func (_mr *MockDatabaseMockRecorder) RenameSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RenameSchema", arg0, arg1, arg2)
}

// DeleteSchema mocks base method
func (_m *MockDatabase) DeleteSchema(recordType string, columnName string) error {
	ret := _m.ctrl.Call(_m, "DeleteSchema", recordType, columnName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchema indicates an expected call of DeleteSchema
func (_mr *MockDatabaseMockRecorder) DeleteSchema(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSchema", arg0, arg1)
}

// GetSchema mocks base method
func (_m *MockDatabase) GetSchema(recordType string) (RecordSchema, error) {
	ret := _m.ctrl.Call(_m, "GetSchema", recordType)
	ret0, _ := ret[0].(RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema
func (_mr *MockDatabaseMockRecorder) GetSchema(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSchema", arg0)
}

// GetRecordSchemas mocks base method
func (_m *MockDatabase) GetRecordSchemas() (map[string]RecordSchema, error) {
	ret := _m.ctrl.Call(_m, "GetRecordSchemas")
	ret0, _ := ret[0].(map[string]RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordSchemas indicates an expected call of GetRecordSchemas
func (_mr *MockDatabaseMockRecorder) GetRecordSchemas() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRecordSchemas")
}

// GetSubscription mocks base method
func (_m *MockDatabase) GetSubscription(key string, deviceID string, subscription *Subscription) error {
	ret := _m.ctrl.Call(_m, "GetSubscription", key, deviceID, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSubscription indicates an expected call of GetSubscription
func (_mr *MockDatabaseMockRecorder) GetSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSubscription", arg0, arg1, arg2)
}

// SaveSubscription mocks base method
func (_m *MockDatabase) SaveSubscription(subscription *Subscription) error {
	ret := _m.ctrl.Call(_m, "SaveSubscription", subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSubscription indicates an expected call of SaveSubscription
func (_mr *MockDatabaseMockRecorder) SaveSubscription(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SaveSubscription", arg0)
}

// DeleteSubscription mocks base method
func (_m *MockDatabase) DeleteSubscription(key string, deviceID string) error {
	ret := _m.ctrl.Call(_m, "DeleteSubscription", key, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription
func (_mr *MockDatabaseMockRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSubscription", arg0, arg1)
}

// GetSubscriptionsByDeviceID mocks base method
func (_m *MockDatabase) GetSubscriptionsByDeviceID(deviceID string) []Subscription {
	ret := _m.ctrl.Call(_m, "GetSubscriptionsByDeviceID", deviceID)
	ret0, _ := ret[0].([]Subscription)
	return ret0
}

// GetSubscriptionsByDeviceID indicates an expected call of GetSubscriptionsByDeviceID
func (_mr *MockDatabaseMockRecorder) GetSubscriptionsByDeviceID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSubscriptionsByDeviceID", arg0)
}

// GetMatchingSubscriptions mocks base method
func (_m *MockDatabase) GetMatchingSubscriptions(record *Record) []Subscription {
	ret := _m.ctrl.Call(_m, "GetMatchingSubscriptions", record)
	ret0, _ := ret[0].([]Subscription)
	return ret0
}

// GetMatchingSubscriptions indicates an expected call of GetMatchingSubscriptions
func (_mr *MockDatabaseMockRecorder) GetMatchingSubscriptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMatchingSubscriptions", arg0)
}

// MockTxDatabase is a mock of TxDatabase interface
type MockTxDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockTxDatabaseMockRecorder
}

// MockTxDatabaseMockRecorder is the mock recorder for MockTxDatabase
type MockTxDatabaseMockRecorder struct {
	mock *MockTxDatabase
}

// NewMockTxDatabase creates a new mock instance
func NewMockTxDatabase(ctrl *gomock.Controller) *MockTxDatabase {
	mock := &MockTxDatabase{ctrl: ctrl}
	mock.recorder = &MockTxDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTxDatabase) EXPECT() *MockTxDatabaseMockRecorder {
	return _m.recorder
}

// Begin mocks base method
func (_m *MockTxDatabase) Begin() error {
	ret := _m.ctrl.Call(_m, "Begin")
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin
func (_mr *MockTxDatabaseMockRecorder) Begin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Begin")
}

// Commit mocks base method
func (_m *MockTxDatabase) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockTxDatabaseMockRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit")
}

// Rollback mocks base method
func (_m *MockTxDatabase) Rollback() error {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (_mr *MockTxDatabaseMockRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rollback")
}

// MockRowsIter is a mock of RowsIter interface
type MockRowsIter struct {
	ctrl     *gomock.Controller
	recorder *MockRowsIterMockRecorder
}

// MockRowsIterMockRecorder is the mock recorder for MockRowsIter
type MockRowsIterMockRecorder struct {
	mock *MockRowsIter
}

// NewMockRowsIter creates a new mock instance
func NewMockRowsIter(ctrl *gomock.Controller) *MockRowsIter {
	mock := &MockRowsIter{ctrl: ctrl}
	mock.recorder = &MockRowsIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRowsIter) EXPECT() *MockRowsIterMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockRowsIter) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockRowsIterMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Next mocks base method
func (_m *MockRowsIter) Next(record *Record) error {
	ret := _m.ctrl.Call(_m, "Next", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next
func (_mr *MockRowsIterMockRecorder) Next(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next", arg0)
}

// OverallRecordCount mocks base method
func (_m *MockRowsIter) OverallRecordCount() *uint64 {
	ret := _m.ctrl.Call(_m, "OverallRecordCount")
	ret0, _ := ret[0].(*uint64)
	return ret0
}

// OverallRecordCount indicates an expected call of OverallRecordCount
func (_mr *MockRowsIterMockRecorder) OverallRecordCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OverallRecordCount")
}
