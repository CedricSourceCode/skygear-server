package config

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AuthenticationConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "identities":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Identities")
				return
			}
			if cap(z.Identities) >= int(zb0002) {
				z.Identities = (z.Identities)[:zb0002]
			} else {
				z.Identities = make([]string, zb0002)
			}
			for za0001 := range z.Identities {
				z.Identities[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Identities", za0001)
					return
				}
			}
		case "primary_authenticators":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PrimaryAuthenticators")
				return
			}
			if cap(z.PrimaryAuthenticators) >= int(zb0003) {
				z.PrimaryAuthenticators = (z.PrimaryAuthenticators)[:zb0003]
			} else {
				z.PrimaryAuthenticators = make([]string, zb0003)
			}
			for za0002 := range z.PrimaryAuthenticators {
				z.PrimaryAuthenticators[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PrimaryAuthenticators", za0002)
					return
				}
			}
		case "secondary_authenticators":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "SecondaryAuthenticators")
				return
			}
			if cap(z.SecondaryAuthenticators) >= int(zb0004) {
				z.SecondaryAuthenticators = (z.SecondaryAuthenticators)[:zb0004]
			} else {
				z.SecondaryAuthenticators = make([]string, zb0004)
			}
			for za0003 := range z.SecondaryAuthenticators {
				z.SecondaryAuthenticators[za0003], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SecondaryAuthenticators", za0003)
					return
				}
			}
		case "secondary_authentication_mode":
			{
				var zb0005 string
				zb0005, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SecondaryAuthenticationMode")
					return
				}
				z.SecondaryAuthenticationMode = SecondaryAuthenticationMode(zb0005)
			}
		case "secret":
			z.Secret, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Secret")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthenticationConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "identities"
	err = en.Append(0x85, 0xaa, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Identities)))
	if err != nil {
		err = msgp.WrapError(err, "Identities")
		return
	}
	for za0001 := range z.Identities {
		err = en.WriteString(z.Identities[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Identities", za0001)
			return
		}
	}
	// write "primary_authenticators"
	err = en.Append(0xb6, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PrimaryAuthenticators)))
	if err != nil {
		err = msgp.WrapError(err, "PrimaryAuthenticators")
		return
	}
	for za0002 := range z.PrimaryAuthenticators {
		err = en.WriteString(z.PrimaryAuthenticators[za0002])
		if err != nil {
			err = msgp.WrapError(err, "PrimaryAuthenticators", za0002)
			return
		}
	}
	// write "secondary_authenticators"
	err = en.Append(0xb8, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.SecondaryAuthenticators)))
	if err != nil {
		err = msgp.WrapError(err, "SecondaryAuthenticators")
		return
	}
	for za0003 := range z.SecondaryAuthenticators {
		err = en.WriteString(z.SecondaryAuthenticators[za0003])
		if err != nil {
			err = msgp.WrapError(err, "SecondaryAuthenticators", za0003)
			return
		}
	}
	// write "secondary_authentication_mode"
	err = en.Append(0xbd, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.SecondaryAuthenticationMode))
	if err != nil {
		err = msgp.WrapError(err, "SecondaryAuthenticationMode")
		return
	}
	// write "secret"
	err = en.Append(0xa6, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Secret)
	if err != nil {
		err = msgp.WrapError(err, "Secret")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthenticationConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "identities"
	o = append(o, 0x85, 0xaa, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Identities)))
	for za0001 := range z.Identities {
		o = msgp.AppendString(o, z.Identities[za0001])
	}
	// string "primary_authenticators"
	o = append(o, 0xb6, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PrimaryAuthenticators)))
	for za0002 := range z.PrimaryAuthenticators {
		o = msgp.AppendString(o, z.PrimaryAuthenticators[za0002])
	}
	// string "secondary_authenticators"
	o = append(o, 0xb8, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.SecondaryAuthenticators)))
	for za0003 := range z.SecondaryAuthenticators {
		o = msgp.AppendString(o, z.SecondaryAuthenticators[za0003])
	}
	// string "secondary_authentication_mode"
	o = append(o, 0xbd, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, string(z.SecondaryAuthenticationMode))
	// string "secret"
	o = append(o, 0xa6, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74)
	o = msgp.AppendString(o, z.Secret)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthenticationConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "identities":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Identities")
				return
			}
			if cap(z.Identities) >= int(zb0002) {
				z.Identities = (z.Identities)[:zb0002]
			} else {
				z.Identities = make([]string, zb0002)
			}
			for za0001 := range z.Identities {
				z.Identities[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Identities", za0001)
					return
				}
			}
		case "primary_authenticators":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrimaryAuthenticators")
				return
			}
			if cap(z.PrimaryAuthenticators) >= int(zb0003) {
				z.PrimaryAuthenticators = (z.PrimaryAuthenticators)[:zb0003]
			} else {
				z.PrimaryAuthenticators = make([]string, zb0003)
			}
			for za0002 := range z.PrimaryAuthenticators {
				z.PrimaryAuthenticators[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PrimaryAuthenticators", za0002)
					return
				}
			}
		case "secondary_authenticators":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SecondaryAuthenticators")
				return
			}
			if cap(z.SecondaryAuthenticators) >= int(zb0004) {
				z.SecondaryAuthenticators = (z.SecondaryAuthenticators)[:zb0004]
			} else {
				z.SecondaryAuthenticators = make([]string, zb0004)
			}
			for za0003 := range z.SecondaryAuthenticators {
				z.SecondaryAuthenticators[za0003], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SecondaryAuthenticators", za0003)
					return
				}
			}
		case "secondary_authentication_mode":
			{
				var zb0005 string
				zb0005, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SecondaryAuthenticationMode")
					return
				}
				z.SecondaryAuthenticationMode = SecondaryAuthenticationMode(zb0005)
			}
		case "secret":
			z.Secret, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Secret")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthenticationConfiguration) Msgsize() (s int) {
	s = 1 + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.Identities {
		s += msgp.StringPrefixSize + len(z.Identities[za0001])
	}
	s += 23 + msgp.ArrayHeaderSize
	for za0002 := range z.PrimaryAuthenticators {
		s += msgp.StringPrefixSize + len(z.PrimaryAuthenticators[za0002])
	}
	s += 25 + msgp.ArrayHeaderSize
	for za0003 := range z.SecondaryAuthenticators {
		s += msgp.StringPrefixSize + len(z.SecondaryAuthenticators[za0003])
	}
	s += 30 + msgp.StringPrefixSize + len(string(z.SecondaryAuthenticationMode)) + 7 + msgp.StringPrefixSize + len(z.Secret)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SecondaryAuthenticationMode) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SecondaryAuthenticationMode(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SecondaryAuthenticationMode) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SecondaryAuthenticationMode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SecondaryAuthenticationMode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SecondaryAuthenticationMode(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SecondaryAuthenticationMode) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}
