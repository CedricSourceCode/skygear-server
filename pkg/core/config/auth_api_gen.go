package config

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AuthAPIConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "enabled":
			z.Enabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Enabled")
				return
			}
		case "on_identity_conflict":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OnIdentityConflict")
					return
				}
				z.OnIdentityConflict = nil
			} else {
				if z.OnIdentityConflict == nil {
					z.OnIdentityConflict = new(AuthAPIIdentityConflictConfiguration)
				}
				err = z.OnIdentityConflict.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "OnIdentityConflict")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthAPIConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "enabled"
	err = en.Append(0x82, 0xa7, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Enabled)
	if err != nil {
		err = msgp.WrapError(err, "Enabled")
		return
	}
	// write "on_identity_conflict"
	err = en.Append(0xb4, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74)
	if err != nil {
		return
	}
	if z.OnIdentityConflict == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.OnIdentityConflict.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "OnIdentityConflict")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthAPIConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "enabled"
	o = append(o, 0x82, 0xa7, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.Enabled)
	// string "on_identity_conflict"
	o = append(o, 0xb4, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74)
	if z.OnIdentityConflict == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.OnIdentityConflict.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "OnIdentityConflict")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthAPIConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "enabled":
			z.Enabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enabled")
				return
			}
		case "on_identity_conflict":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OnIdentityConflict = nil
			} else {
				if z.OnIdentityConflict == nil {
					z.OnIdentityConflict = new(AuthAPIIdentityConflictConfiguration)
				}
				bts, err = z.OnIdentityConflict.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "OnIdentityConflict")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthAPIConfiguration) Msgsize() (s int) {
	s = 1 + 8 + msgp.BoolSize + 21
	if z.OnIdentityConflict == nil {
		s += msgp.NilSize
	} else {
		s += z.OnIdentityConflict.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AuthAPIIdentityConflictConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "login_id":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "LoginID")
					return
				}
				z.LoginID = nil
			} else {
				if z.LoginID == nil {
					z.LoginID = new(AuthAPILoginIDConflictConfiguration)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "LoginID")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "LoginID")
						return
					}
					switch msgp.UnsafeString(field) {
					case "allow_create_new_user":
						z.LoginID.AllowCreateNewUser, err = dc.ReadBool()
						if err != nil {
							err = msgp.WrapError(err, "LoginID", "AllowCreateNewUser")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "LoginID")
							return
						}
					}
				}
			}
		case "oauth":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OAuth")
					return
				}
				z.OAuth = nil
			} else {
				if z.OAuth == nil {
					z.OAuth = new(AuthAPIOAuthConflictConfiguration)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "OAuth")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "OAuth")
						return
					}
					switch msgp.UnsafeString(field) {
					case "allow_create_new_user":
						z.OAuth.AllowCreateNewUser, err = dc.ReadBool()
						if err != nil {
							err = msgp.WrapError(err, "OAuth", "AllowCreateNewUser")
							return
						}
					case "allow_auto_merge_user":
						z.OAuth.AllowAutoMergeUser, err = dc.ReadBool()
						if err != nil {
							err = msgp.WrapError(err, "OAuth", "AllowAutoMergeUser")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "OAuth")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthAPIIdentityConflictConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "login_id"
	err = en.Append(0x82, 0xa8, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	if z.LoginID == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "allow_create_new_user"
		err = en.Append(0x81, 0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteBool(z.LoginID.AllowCreateNewUser)
		if err != nil {
			err = msgp.WrapError(err, "LoginID", "AllowCreateNewUser")
			return
		}
	}
	// write "oauth"
	err = en.Append(0xa5, 0x6f, 0x61, 0x75, 0x74, 0x68)
	if err != nil {
		return
	}
	if z.OAuth == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "allow_create_new_user"
		err = en.Append(0x82, 0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteBool(z.OAuth.AllowCreateNewUser)
		if err != nil {
			err = msgp.WrapError(err, "OAuth", "AllowCreateNewUser")
			return
		}
		// write "allow_auto_merge_user"
		err = en.Append(0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteBool(z.OAuth.AllowAutoMergeUser)
		if err != nil {
			err = msgp.WrapError(err, "OAuth", "AllowAutoMergeUser")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthAPIIdentityConflictConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "login_id"
	o = append(o, 0x82, 0xa8, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64)
	if z.LoginID == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "allow_create_new_user"
		o = append(o, 0x81, 0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72)
		o = msgp.AppendBool(o, z.LoginID.AllowCreateNewUser)
	}
	// string "oauth"
	o = append(o, 0xa5, 0x6f, 0x61, 0x75, 0x74, 0x68)
	if z.OAuth == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "allow_create_new_user"
		o = append(o, 0x82, 0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72)
		o = msgp.AppendBool(o, z.OAuth.AllowCreateNewUser)
		// string "allow_auto_merge_user"
		o = append(o, 0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72)
		o = msgp.AppendBool(o, z.OAuth.AllowAutoMergeUser)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthAPIIdentityConflictConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "login_id":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.LoginID = nil
			} else {
				if z.LoginID == nil {
					z.LoginID = new(AuthAPILoginIDConflictConfiguration)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LoginID")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "LoginID")
						return
					}
					switch msgp.UnsafeString(field) {
					case "allow_create_new_user":
						z.LoginID.AllowCreateNewUser, bts, err = msgp.ReadBoolBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "LoginID", "AllowCreateNewUser")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "LoginID")
							return
						}
					}
				}
			}
		case "oauth":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OAuth = nil
			} else {
				if z.OAuth == nil {
					z.OAuth = new(AuthAPIOAuthConflictConfiguration)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "OAuth")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "OAuth")
						return
					}
					switch msgp.UnsafeString(field) {
					case "allow_create_new_user":
						z.OAuth.AllowCreateNewUser, bts, err = msgp.ReadBoolBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "OAuth", "AllowCreateNewUser")
							return
						}
					case "allow_auto_merge_user":
						z.OAuth.AllowAutoMergeUser, bts, err = msgp.ReadBoolBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "OAuth", "AllowAutoMergeUser")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "OAuth")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthAPIIdentityConflictConfiguration) Msgsize() (s int) {
	s = 1 + 9
	if z.LoginID == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 22 + msgp.BoolSize
	}
	s += 6
	if z.OAuth == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 22 + msgp.BoolSize + 22 + msgp.BoolSize
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AuthAPILoginIDConflictConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "allow_create_new_user":
			z.AllowCreateNewUser, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "AllowCreateNewUser")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AuthAPILoginIDConflictConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "allow_create_new_user"
	err = en.Append(0x81, 0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.AllowCreateNewUser)
	if err != nil {
		err = msgp.WrapError(err, "AllowCreateNewUser")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AuthAPILoginIDConflictConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "allow_create_new_user"
	o = append(o, 0x81, 0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72)
	o = msgp.AppendBool(o, z.AllowCreateNewUser)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthAPILoginIDConflictConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "allow_create_new_user":
			z.AllowCreateNewUser, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AllowCreateNewUser")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AuthAPILoginIDConflictConfiguration) Msgsize() (s int) {
	s = 1 + 22 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AuthAPIOAuthConflictConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "allow_create_new_user":
			z.AllowCreateNewUser, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "AllowCreateNewUser")
				return
			}
		case "allow_auto_merge_user":
			z.AllowAutoMergeUser, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "AllowAutoMergeUser")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AuthAPIOAuthConflictConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "allow_create_new_user"
	err = en.Append(0x82, 0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.AllowCreateNewUser)
	if err != nil {
		err = msgp.WrapError(err, "AllowCreateNewUser")
		return
	}
	// write "allow_auto_merge_user"
	err = en.Append(0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.AllowAutoMergeUser)
	if err != nil {
		err = msgp.WrapError(err, "AllowAutoMergeUser")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AuthAPIOAuthConflictConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "allow_create_new_user"
	o = append(o, 0x82, 0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72)
	o = msgp.AppendBool(o, z.AllowCreateNewUser)
	// string "allow_auto_merge_user"
	o = append(o, 0xb5, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72)
	o = msgp.AppendBool(o, z.AllowAutoMergeUser)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthAPIOAuthConflictConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "allow_create_new_user":
			z.AllowCreateNewUser, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AllowCreateNewUser")
				return
			}
		case "allow_auto_merge_user":
			z.AllowAutoMergeUser, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AllowAutoMergeUser")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AuthAPIOAuthConflictConfiguration) Msgsize() (s int) {
	s = 1 + 22 + msgp.BoolSize + 22 + msgp.BoolSize
	return
}
