package config

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AuthenticatorBearerTokenConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "expire_in_days":
			z.ExpireInDays, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ExpireInDays")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AuthenticatorBearerTokenConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "expire_in_days"
	err = en.Append(0x81, 0xae, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ExpireInDays)
	if err != nil {
		err = msgp.WrapError(err, "ExpireInDays")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AuthenticatorBearerTokenConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "expire_in_days"
	o = append(o, 0x81, 0xae, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73)
	o = msgp.AppendInt(o, z.ExpireInDays)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthenticatorBearerTokenConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "expire_in_days":
			z.ExpireInDays, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpireInDays")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AuthenticatorBearerTokenConfiguration) Msgsize() (s int) {
	s = 1 + 15 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AuthenticatorConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "totp":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TOTP")
					return
				}
				z.TOTP = nil
			} else {
				if z.TOTP == nil {
					z.TOTP = new(AuthenticatorTOTPConfiguration)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "TOTP")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "TOTP")
						return
					}
					switch msgp.UnsafeString(field) {
					case "maximum":
						if dc.IsNil() {
							err = dc.ReadNil()
							if err != nil {
								err = msgp.WrapError(err, "TOTP", "Maximum")
								return
							}
							z.TOTP.Maximum = nil
						} else {
							if z.TOTP.Maximum == nil {
								z.TOTP.Maximum = new(int)
							}
							*z.TOTP.Maximum, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "TOTP", "Maximum")
								return
							}
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "TOTP")
							return
						}
					}
				}
			}
		case "oob":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OOB")
					return
				}
				z.OOB = nil
			} else {
				if z.OOB == nil {
					z.OOB = new(AuthenticatorOOBConfiguration)
				}
				err = z.OOB.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "OOB")
					return
				}
			}
		case "bearer_token":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "BearerToken")
					return
				}
				z.BearerToken = nil
			} else {
				if z.BearerToken == nil {
					z.BearerToken = new(AuthenticatorBearerTokenConfiguration)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "BearerToken")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "BearerToken")
						return
					}
					switch msgp.UnsafeString(field) {
					case "expire_in_days":
						z.BearerToken.ExpireInDays, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "BearerToken", "ExpireInDays")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "BearerToken")
							return
						}
					}
				}
			}
		case "recovery_code":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RecoveryCode")
					return
				}
				z.RecoveryCode = nil
			} else {
				if z.RecoveryCode == nil {
					z.RecoveryCode = new(AuthenticatorRecoveryCodeConfiguration)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "RecoveryCode")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "RecoveryCode")
						return
					}
					switch msgp.UnsafeString(field) {
					case "count":
						z.RecoveryCode.Count, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "RecoveryCode", "Count")
							return
						}
					case "list_enabled":
						z.RecoveryCode.ListEnabled, err = dc.ReadBool()
						if err != nil {
							err = msgp.WrapError(err, "RecoveryCode", "ListEnabled")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "RecoveryCode")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthenticatorConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "totp"
	err = en.Append(0x84, 0xa4, 0x74, 0x6f, 0x74, 0x70)
	if err != nil {
		return
	}
	if z.TOTP == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "maximum"
		err = en.Append(0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
		if err != nil {
			return
		}
		if z.TOTP.Maximum == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt(*z.TOTP.Maximum)
			if err != nil {
				err = msgp.WrapError(err, "TOTP", "Maximum")
				return
			}
		}
	}
	// write "oob"
	err = en.Append(0xa3, 0x6f, 0x6f, 0x62)
	if err != nil {
		return
	}
	if z.OOB == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.OOB.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "OOB")
			return
		}
	}
	// write "bearer_token"
	err = en.Append(0xac, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	if z.BearerToken == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "expire_in_days"
		err = en.Append(0x81, 0xae, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73)
		if err != nil {
			return
		}
		err = en.WriteInt(z.BearerToken.ExpireInDays)
		if err != nil {
			err = msgp.WrapError(err, "BearerToken", "ExpireInDays")
			return
		}
	}
	// write "recovery_code"
	err = en.Append(0xad, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	if z.RecoveryCode == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "count"
		err = en.Append(0x82, 0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.RecoveryCode.Count)
		if err != nil {
			err = msgp.WrapError(err, "RecoveryCode", "Count")
			return
		}
		// write "list_enabled"
		err = en.Append(0xac, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
		if err != nil {
			return
		}
		err = en.WriteBool(z.RecoveryCode.ListEnabled)
		if err != nil {
			err = msgp.WrapError(err, "RecoveryCode", "ListEnabled")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthenticatorConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "totp"
	o = append(o, 0x84, 0xa4, 0x74, 0x6f, 0x74, 0x70)
	if z.TOTP == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "maximum"
		o = append(o, 0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
		if z.TOTP.Maximum == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt(o, *z.TOTP.Maximum)
		}
	}
	// string "oob"
	o = append(o, 0xa3, 0x6f, 0x6f, 0x62)
	if z.OOB == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.OOB.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "OOB")
			return
		}
	}
	// string "bearer_token"
	o = append(o, 0xac, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e)
	if z.BearerToken == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "expire_in_days"
		o = append(o, 0x81, 0xae, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73)
		o = msgp.AppendInt(o, z.BearerToken.ExpireInDays)
	}
	// string "recovery_code"
	o = append(o, 0xad, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if z.RecoveryCode == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "count"
		o = append(o, 0x82, 0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.RecoveryCode.Count)
		// string "list_enabled"
		o = append(o, 0xac, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
		o = msgp.AppendBool(o, z.RecoveryCode.ListEnabled)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthenticatorConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "totp":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TOTP = nil
			} else {
				if z.TOTP == nil {
					z.TOTP = new(AuthenticatorTOTPConfiguration)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TOTP")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "TOTP")
						return
					}
					switch msgp.UnsafeString(field) {
					case "maximum":
						if msgp.IsNil(bts) {
							bts, err = msgp.ReadNilBytes(bts)
							if err != nil {
								return
							}
							z.TOTP.Maximum = nil
						} else {
							if z.TOTP.Maximum == nil {
								z.TOTP.Maximum = new(int)
							}
							*z.TOTP.Maximum, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "TOTP", "Maximum")
								return
							}
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "TOTP")
							return
						}
					}
				}
			}
		case "oob":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OOB = nil
			} else {
				if z.OOB == nil {
					z.OOB = new(AuthenticatorOOBConfiguration)
				}
				bts, err = z.OOB.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "OOB")
					return
				}
			}
		case "bearer_token":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.BearerToken = nil
			} else {
				if z.BearerToken == nil {
					z.BearerToken = new(AuthenticatorBearerTokenConfiguration)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "BearerToken")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "BearerToken")
						return
					}
					switch msgp.UnsafeString(field) {
					case "expire_in_days":
						z.BearerToken.ExpireInDays, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "BearerToken", "ExpireInDays")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "BearerToken")
							return
						}
					}
				}
			}
		case "recovery_code":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RecoveryCode = nil
			} else {
				if z.RecoveryCode == nil {
					z.RecoveryCode = new(AuthenticatorRecoveryCodeConfiguration)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RecoveryCode")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "RecoveryCode")
						return
					}
					switch msgp.UnsafeString(field) {
					case "count":
						z.RecoveryCode.Count, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "RecoveryCode", "Count")
							return
						}
					case "list_enabled":
						z.RecoveryCode.ListEnabled, bts, err = msgp.ReadBoolBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "RecoveryCode", "ListEnabled")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "RecoveryCode")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthenticatorConfiguration) Msgsize() (s int) {
	s = 1 + 5
	if z.TOTP == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8
		if z.TOTP.Maximum == nil {
			s += msgp.NilSize
		} else {
			s += msgp.IntSize
		}
	}
	s += 4
	if z.OOB == nil {
		s += msgp.NilSize
	} else {
		s += z.OOB.Msgsize()
	}
	s += 13
	if z.BearerToken == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 15 + msgp.IntSize
	}
	s += 14
	if z.RecoveryCode == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 6 + msgp.IntSize + 13 + msgp.BoolSize
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AuthenticatorOOBConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sms":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SMS")
					return
				}
				z.SMS = nil
			} else {
				if z.SMS == nil {
					z.SMS = new(AuthenticatorOOBSMSConfiguration)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "SMS")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "SMS")
						return
					}
					switch msgp.UnsafeString(field) {
					case "maximum":
						if dc.IsNil() {
							err = dc.ReadNil()
							if err != nil {
								err = msgp.WrapError(err, "SMS", "Maximum")
								return
							}
							z.SMS.Maximum = nil
						} else {
							if z.SMS.Maximum == nil {
								z.SMS.Maximum = new(int)
							}
							*z.SMS.Maximum, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "SMS", "Maximum")
								return
							}
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "SMS")
							return
						}
					}
				}
			}
		case "email":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Email")
					return
				}
				z.Email = nil
			} else {
				if z.Email == nil {
					z.Email = new(AuthenticatorOOBEmailConfiguration)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Email")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Email")
						return
					}
					switch msgp.UnsafeString(field) {
					case "maximum":
						if dc.IsNil() {
							err = dc.ReadNil()
							if err != nil {
								err = msgp.WrapError(err, "Email", "Maximum")
								return
							}
							z.Email.Maximum = nil
						} else {
							if z.Email.Maximum == nil {
								z.Email.Maximum = new(int)
							}
							*z.Email.Maximum, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "Email", "Maximum")
								return
							}
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Email")
							return
						}
					}
				}
			}
		case "sender":
			z.Sender, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Sender")
				return
			}
		case "subject":
			z.Subject, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Subject")
				return
			}
		case "reply_to":
			z.ReplyTo, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReplyTo")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthenticatorOOBConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "sms"
	err = en.Append(0x85, 0xa3, 0x73, 0x6d, 0x73)
	if err != nil {
		return
	}
	if z.SMS == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "maximum"
		err = en.Append(0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
		if err != nil {
			return
		}
		if z.SMS.Maximum == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt(*z.SMS.Maximum)
			if err != nil {
				err = msgp.WrapError(err, "SMS", "Maximum")
				return
			}
		}
	}
	// write "email"
	err = en.Append(0xa5, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	if z.Email == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "maximum"
		err = en.Append(0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
		if err != nil {
			return
		}
		if z.Email.Maximum == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt(*z.Email.Maximum)
			if err != nil {
				err = msgp.WrapError(err, "Email", "Maximum")
				return
			}
		}
	}
	// write "sender"
	err = en.Append(0xa6, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Sender)
	if err != nil {
		err = msgp.WrapError(err, "Sender")
		return
	}
	// write "subject"
	err = en.Append(0xa7, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Subject)
	if err != nil {
		err = msgp.WrapError(err, "Subject")
		return
	}
	// write "reply_to"
	err = en.Append(0xa8, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReplyTo)
	if err != nil {
		err = msgp.WrapError(err, "ReplyTo")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthenticatorOOBConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "sms"
	o = append(o, 0x85, 0xa3, 0x73, 0x6d, 0x73)
	if z.SMS == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "maximum"
		o = append(o, 0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
		if z.SMS.Maximum == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt(o, *z.SMS.Maximum)
		}
	}
	// string "email"
	o = append(o, 0xa5, 0x65, 0x6d, 0x61, 0x69, 0x6c)
	if z.Email == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "maximum"
		o = append(o, 0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
		if z.Email.Maximum == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt(o, *z.Email.Maximum)
		}
	}
	// string "sender"
	o = append(o, 0xa6, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72)
	o = msgp.AppendString(o, z.Sender)
	// string "subject"
	o = append(o, 0xa7, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74)
	o = msgp.AppendString(o, z.Subject)
	// string "reply_to"
	o = append(o, 0xa8, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f)
	o = msgp.AppendString(o, z.ReplyTo)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthenticatorOOBConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sms":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SMS = nil
			} else {
				if z.SMS == nil {
					z.SMS = new(AuthenticatorOOBSMSConfiguration)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SMS")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "SMS")
						return
					}
					switch msgp.UnsafeString(field) {
					case "maximum":
						if msgp.IsNil(bts) {
							bts, err = msgp.ReadNilBytes(bts)
							if err != nil {
								return
							}
							z.SMS.Maximum = nil
						} else {
							if z.SMS.Maximum == nil {
								z.SMS.Maximum = new(int)
							}
							*z.SMS.Maximum, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "SMS", "Maximum")
								return
							}
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "SMS")
							return
						}
					}
				}
			}
		case "email":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Email = nil
			} else {
				if z.Email == nil {
					z.Email = new(AuthenticatorOOBEmailConfiguration)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Email")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Email")
						return
					}
					switch msgp.UnsafeString(field) {
					case "maximum":
						if msgp.IsNil(bts) {
							bts, err = msgp.ReadNilBytes(bts)
							if err != nil {
								return
							}
							z.Email.Maximum = nil
						} else {
							if z.Email.Maximum == nil {
								z.Email.Maximum = new(int)
							}
							*z.Email.Maximum, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Email", "Maximum")
								return
							}
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Email")
							return
						}
					}
				}
			}
		case "sender":
			z.Sender, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sender")
				return
			}
		case "subject":
			z.Subject, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Subject")
				return
			}
		case "reply_to":
			z.ReplyTo, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReplyTo")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthenticatorOOBConfiguration) Msgsize() (s int) {
	s = 1 + 4
	if z.SMS == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8
		if z.SMS.Maximum == nil {
			s += msgp.NilSize
		} else {
			s += msgp.IntSize
		}
	}
	s += 6
	if z.Email == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 8
		if z.Email.Maximum == nil {
			s += msgp.NilSize
		} else {
			s += msgp.IntSize
		}
	}
	s += 7 + msgp.StringPrefixSize + len(z.Sender) + 8 + msgp.StringPrefixSize + len(z.Subject) + 9 + msgp.StringPrefixSize + len(z.ReplyTo)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AuthenticatorOOBEmailConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "maximum":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Maximum")
					return
				}
				z.Maximum = nil
			} else {
				if z.Maximum == nil {
					z.Maximum = new(int)
				}
				*z.Maximum, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Maximum")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthenticatorOOBEmailConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "maximum"
	err = en.Append(0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
	if err != nil {
		return
	}
	if z.Maximum == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt(*z.Maximum)
		if err != nil {
			err = msgp.WrapError(err, "Maximum")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthenticatorOOBEmailConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "maximum"
	o = append(o, 0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
	if z.Maximum == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt(o, *z.Maximum)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthenticatorOOBEmailConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "maximum":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Maximum = nil
			} else {
				if z.Maximum == nil {
					z.Maximum = new(int)
				}
				*z.Maximum, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Maximum")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthenticatorOOBEmailConfiguration) Msgsize() (s int) {
	s = 1 + 8
	if z.Maximum == nil {
		s += msgp.NilSize
	} else {
		s += msgp.IntSize
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AuthenticatorOOBSMSConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "maximum":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Maximum")
					return
				}
				z.Maximum = nil
			} else {
				if z.Maximum == nil {
					z.Maximum = new(int)
				}
				*z.Maximum, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Maximum")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthenticatorOOBSMSConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "maximum"
	err = en.Append(0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
	if err != nil {
		return
	}
	if z.Maximum == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt(*z.Maximum)
		if err != nil {
			err = msgp.WrapError(err, "Maximum")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthenticatorOOBSMSConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "maximum"
	o = append(o, 0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
	if z.Maximum == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt(o, *z.Maximum)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthenticatorOOBSMSConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "maximum":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Maximum = nil
			} else {
				if z.Maximum == nil {
					z.Maximum = new(int)
				}
				*z.Maximum, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Maximum")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthenticatorOOBSMSConfiguration) Msgsize() (s int) {
	s = 1 + 8
	if z.Maximum == nil {
		s += msgp.NilSize
	} else {
		s += msgp.IntSize
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AuthenticatorRecoveryCodeConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "count":
			z.Count, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		case "list_enabled":
			z.ListEnabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "ListEnabled")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AuthenticatorRecoveryCodeConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "count"
	err = en.Append(0x82, 0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	// write "list_enabled"
	err = en.Append(0xac, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.ListEnabled)
	if err != nil {
		err = msgp.WrapError(err, "ListEnabled")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AuthenticatorRecoveryCodeConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "count"
	o = append(o, 0x82, 0xa5, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Count)
	// string "list_enabled"
	o = append(o, 0xac, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.ListEnabled)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthenticatorRecoveryCodeConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "count":
			z.Count, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		case "list_enabled":
			z.ListEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ListEnabled")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AuthenticatorRecoveryCodeConfiguration) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 13 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AuthenticatorTOTPConfiguration) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "maximum":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Maximum")
					return
				}
				z.Maximum = nil
			} else {
				if z.Maximum == nil {
					z.Maximum = new(int)
				}
				*z.Maximum, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Maximum")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthenticatorTOTPConfiguration) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "maximum"
	err = en.Append(0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
	if err != nil {
		return
	}
	if z.Maximum == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt(*z.Maximum)
		if err != nil {
			err = msgp.WrapError(err, "Maximum")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthenticatorTOTPConfiguration) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "maximum"
	o = append(o, 0x81, 0xa7, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d)
	if z.Maximum == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt(o, *z.Maximum)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthenticatorTOTPConfiguration) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "maximum":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Maximum = nil
			} else {
				if z.Maximum == nil {
					z.Maximum = new(int)
				}
				*z.Maximum, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Maximum")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthenticatorTOTPConfiguration) Msgsize() (s int) {
	s = 1 + 8
	if z.Maximum == nil {
		s += msgp.NilSize
	} else {
		s += msgp.IntSize
	}
	return
}
