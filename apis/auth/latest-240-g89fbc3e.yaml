openapi: 3.0.0
info:
  title: Auth Gear
  version: 1.0.0
servers:
- url: '{base_url}/_auth'
  description: Auth Gear URL
  variables:
    base_url:
      default: https://my_app.skygearapis.com
      description: Skygear App URL
paths:
  /challenge:
    post:
      tags:
      - User
      summary: Obtain new challenge
      description: |-
        Obtain a new challenge for challenge-based OAuth authentication.
        Challenges can be used once only.
      requestBody:
        description: Describe purpose of the challenge.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthChallengeRequest'
      responses:
        "200":
          description: Created challenge information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthChallengeResponse'
components:
  schemas:
    AfterIdentityCreateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/IdentityCreateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - after_identity_create
          type: string
      type: object
    AfterIdentityDeleteEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/IdentityDeleteEventPayload'
        seq:
          type: integer
        type:
          enum:
          - after_identity_delete
          type: string
      type: object
    AfterIdentityUpdateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/IdentityUpdateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - after_identity_update
          type: string
      type: object
    AfterPasswordUpdateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/PasswordUpdateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - after_password_update
          type: string
      type: object
    AfterSessionCreateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/SessionCreateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - after_session_create
          type: string
      type: object
    AfterSessionDeleteEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/SessionDeleteEventPayload'
        seq:
          type: integer
        type:
          enum:
          - after_session_delete
          type: string
      type: object
    AfterUserCreateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/UserCreateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - after_user_create
          type: string
      type: object
    AfterUserUpdateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/UserUpdateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - after_user_update
          type: string
      type: object
    AuthResponse:
      properties:
        result:
          properties:
            access_token:
              type: string
            refresh_token:
              type: string
            session_id:
              type: string
            user:
              $ref: '#/components/schemas/User'
          type: object
      type: object
    BeforeIdentityCreateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/IdentityCreateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - before_identity_create
          type: string
      type: object
    BeforeIdentityDeleteEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/IdentityDeleteEventPayload'
        seq:
          type: integer
        type:
          enum:
          - before_identity_delete
          type: string
      type: object
    BeforeIdentityUpdateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/IdentityUpdateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - before_identity_update
          type: string
      type: object
    BeforePasswordUpdateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/PasswordUpdateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - before_password_update
          type: string
      type: object
    BeforeSessionCreateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/SessionCreateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - before_session_create
          type: string
      type: object
    BeforeSessionDeleteEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/SessionDeleteEventPayload'
        seq:
          type: integer
        type:
          enum:
          - before_session_delete
          type: string
      type: object
    BeforeUserCreateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/UserCreateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - before_user_create
          type: string
      type: object
    BeforeUserUpdateEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/UserUpdateEventPayload'
        seq:
          type: integer
        type:
          enum:
          - before_user_update
          type: string
      type: object
    EventContext:
      properties:
        identity_id:
          type: string
        session:
          $ref: '#/components/schemas/Session'
        timestamp:
          type: integer
        user_id:
          type: string
      type: object
    Identity:
      properties:
        claims:
          type: object
        type:
          type: string
      type: object
    IdentityCreateEventPayload:
      properties:
        identity:
          $ref: '#/components/schemas/Identity'
        user:
          $ref: '#/components/schemas/User'
      type: object
    IdentityDeleteEventPayload:
      properties:
        identity:
          $ref: '#/components/schemas/Identity'
        user:
          $ref: '#/components/schemas/User'
      type: object
    IdentityUpdateEventPayload:
      properties:
        new_identity:
          $ref: '#/components/schemas/Identity'
        old_identity:
          $ref: '#/components/schemas/Identity'
        user:
          $ref: '#/components/schemas/User'
      type: object
    OAuthChallengeRequest:
      properties:
        purpose:
          type: string
      required:
      - purpose
      type: object
    OAuthChallengeResponse:
      properties:
        expire_at:
          type: string
        token:
          type: string
      required:
      - token
      - expire_at
      type: object
    PasswordUpdateEventPayload:
      properties:
        reason:
          type: string
        user:
          $ref: '#/components/schemas/User'
      type: object
    Session:
      properties:
        acr:
          type: string
        amr:
          items:
            type: string
          type: array
        created_at:
          type: string
        created_by_ip:
          type: string
        id:
          type: string
        identity_claims:
          type: object
        identity_type:
          type: string
        last_accessed_at:
          type: string
        last_accessed_by_ip:
          type: string
        user_agent:
          $ref: '#/components/schemas/UserAgent'
      type: object
    SessionCreateEventPayload:
      properties:
        identity:
          $ref: '#/components/schemas/Identity'
        reason:
          type: string
        session:
          $ref: '#/components/schemas/Session'
        user:
          $ref: '#/components/schemas/User'
      type: object
    SessionDeleteEventPayload:
      properties:
        reason:
          type: string
        session:
          $ref: '#/components/schemas/Session'
        user:
          $ref: '#/components/schemas/User'
      type: object
    SessionResponse:
      properties:
        result:
          $ref: '#/components/schemas/Session'
      type: object
    User:
      properties:
        created_at:
          type: string
        id:
          type: string
        is_disabled:
          type: boolean
        is_manually_verified:
          type: boolean
        is_verified:
          type: boolean
        last_login_at:
          type: string
        metadata:
          type: object
        verify_info:
          type: object
      type: object
    UserAgent:
      properties:
        device_model:
          type: string
        device_name:
          type: string
        name:
          type: string
        os:
          type: string
        os_version:
          type: string
        raw:
          type: string
        version:
          type: string
      type: object
    UserCreateEventPayload:
      properties:
        identity:
          items:
            $ref: '#/components/schemas/Identity'
          type: array
        user:
          $ref: '#/components/schemas/User'
      type: object
    UserResponse:
      properties:
        result:
          properties:
            user:
              $ref: '#/components/schemas/User'
          type: object
      type: object
    UserSyncEvent:
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        id:
          type: string
        payload:
          $ref: '#/components/schemas/UserSyncEventPayload'
        seq:
          type: integer
        type:
          enum:
          - user_sync
          type: string
      type: object
    UserSyncEventPayload:
      properties:
        user:
          $ref: '#/components/schemas/User'
      type: object
    UserUpdateEventPayload:
      properties:
        is_disabled:
          type: boolean
        is_verified:
          type: boolean
        metadata:
          type: object
        reason:
          type: string
        user:
          $ref: '#/components/schemas/User'
        verify_info:
          type: object
      type: object
  responses:
    HookResponse:
      description: Validation result of the event, and optionally mutate the user object.
      content:
        application/json:
          schema:
            oneOf:
            - additionalProperties: false
              properties:
                is_allowed:
                  enum:
                  - true
                  type: boolean
                mutations:
                  properties:
                    is_disabled:
                      type: boolean
                    is_manually_verified:
                      type: boolean
                    metadata:
                      type: object
                    verify_info:
                      type: object
                  type: object
              required:
              - is_allowed
            - additionalProperties: false
              properties:
                data:
                  type: object
                is_allowed:
                  enum:
                  - false
                  type: boolean
                reason:
                  type: string
              required:
              - is_allowed
              - reason
          examples:
            Allowed:
              summary: Allow operation
              value:
                is_allowed: true
            Disallowed:
              summary: Disallow operation with reason
              value:
                data:
                  fields:
                  - user_name
                is_allowed: false
                reason: Validation failure
  securitySchemes:
    access_key:
      type: apiKey
      description: Access key used by client app
      name: X-Skygear-API-Key
      in: header
    access_token:
      type: http
      description: Access token of user
      scheme: bearer
      bearerFormat: token
    master_key:
      type: apiKey
      description: |-
        Master key used by admins, can perform administrative operations.
        Can be used as access key as well.
      name: X-Skygear-API-Key
      in: header
  callbacks:
    IdentityCreateEvent:
      /after_identity_create:
        post:
          summary: After identity creation
          description: An identity is created.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AfterIdentityCreateEvent'
          responses:
            "200":
              $ref: '#/components/responses/EmptyResponse'
      /before_identity_create:
        post:
          summary: Before identity creation
          description: An identity is about to be created.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeforeIdentityCreateEvent'
          responses:
            "200":
              $ref: '#/components/responses/HookResponse'
    IdentityDeleteEvent:
      /after_identity_delete:
        post:
          summary: After identity deletion
          description: An identity is deleted.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AfterIdentityDeleteEvent'
          responses:
            "200":
              $ref: '#/components/responses/EmptyResponse'
      /before_identity_delete:
        post:
          summary: Before identity deletion
          description: An identity is about to be deleted.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeforeIdentityDeleteEvent'
          responses:
            "200":
              $ref: '#/components/responses/HookResponse'
    IdentityUpdateEvent:
      /after_identity_update:
        post:
          summary: After identity update
          description: An identity is updated.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AfterIdentityUpdateEvent'
          responses:
            "200":
              $ref: '#/components/responses/EmptyResponse'
      /before_identity_update:
        post:
          summary: Before identity update
          description: An identity is about to be updated.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeforeIdentityUpdateEvent'
          responses:
            "200":
              $ref: '#/components/responses/HookResponse'
    PasswordUpdateEvent:
      /after_password_udpate:
        post:
          summary: After password update
          description: The password of a user is created.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AfterPasswordUpdateEvent'
          responses:
            "200":
              $ref: '#/components/responses/EmptyResponse'
      /before_password_update:
        post:
          summary: Before password update
          description: The password of a user is about to be updated.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeforePasswordUpdateEvent'
          responses:
            "200":
              $ref: '#/components/responses/HookResponse'
    SessionCreateEvent:
      /after_session_create:
        post:
          summary: After session creation
          description: A session is created.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AfterSessionCreateEvent'
          responses:
            "200":
              $ref: '#/components/responses/EmptyResponse'
      /before_session_create:
        post:
          summary: Before session creation
          description: A session is about to be created.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeforeSessionCreateEvent'
          responses:
            "200":
              $ref: '#/components/responses/HookResponse'
    SessionDeleteEvent:
      /after_session_delete:
        post:
          summary: After session deletion
          description: A session is created.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AfterSessionDeleteEvent'
          responses:
            "200":
              $ref: '#/components/responses/EmptyResponse'
      /before_session_delete:
        post:
          summary: Before session deletion
          description: A session is about to be created.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeforeSessionDeleteEvent'
          responses:
            "200":
              $ref: '#/components/responses/HookResponse'
    UserCreateEvent:
      /after_user_create:
        post:
          summary: After user creation
          description: A user is created.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AfterUserCreateEvent'
          responses:
            "200":
              $ref: '#/components/responses/EmptyResponse'
      /before_user_create:
        post:
          summary: Before user creation
          description: A user is about to be created.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeforeUserCreateEvent'
          responses:
            "200":
              $ref: '#/components/responses/HookResponse'
    UserSyncEvent:
      /user_sync:
        post:
          summary: Synchronize user information
          description: User information should be synchronized.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserSyncEvent'
          responses:
            "200":
              $ref: '#/components/responses/EmptyResponse'
    UserUpdateEvent:
      /after_user_update:
        post:
          summary: After user update
          description: A user is updated.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AfterUserUpdateEvent'
          responses:
            "200":
              $ref: '#/components/responses/EmptyResponse'
      /before_user_update:
        post:
          summary: Before user update
          description: A user is about to be updated.
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeforeUserUpdateEvent'
          responses:
            "200":
              $ref: '#/components/responses/HookResponse'
security:
- access_key: []
tags:
- name: User
  description: User information
- name: User Verification
  description: Login IDs verification
- name: Forgot Password
  description: Password recovery process
- name: Administration
  description: Administrative operation
- name: SSO
  description: Single sign-on
